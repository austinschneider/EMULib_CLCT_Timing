#ifndef _FMMEXTTRANSITIONTEST_H
#define _FMMEXTTRANSITIONTEST_H

/**
 *     @class FMMExtTransitionTest
 *
 *     @short FMM step by step test using external transitions generated by an FMMTester.
 *
 *            This test uses transitions generated by an tts::FMMTransitionGenerator class.
 *            The following steps are performed:
 * 
 *            @li The transitions are loaded into the test outputs of the FMMTester.
 *            @li The input to the FMMTester (=output of the FMM) is checked against an 
 *                Emulation of the FMM Logic. 
 *            @li The internal func state of the FMM is checked against an Emulation of the logic. 
 *            @li After a set of 128k transtitions, the history memory of 
 *                FMM is checked against the series of generated transitions (taking
 *                into account possible skew of the states w.r.t. each otehr and of the 
 *                bits representing a state). 
 * 
 *       @see ---
 *    @author Hannes Sakulin
 * $Revision: 1.1 $
 *     $Date: 2007/03/27 07:53:34 $
 *
 *
 **/

#include "tts/fmm/FMMCard.hh"
#include "tts/fmmtester/FMMTesterCard.hh"
#include "tts/fmm/FMMTransitionGenerator.hh"
#include "tts/fmm/FMMConfiguration.hh"
#include "tts/fmm/FMMBasicTest.hh"

#include <stdint.h>

namespace tts {

  class FMMExtTransitionTest : public tts::FMMBasicTest {
  
  public:
    /// c-tor
    ///
    /// @param card is the FMMCard to use
    /// @param tcard is the FMMTesterCard to use
    /// @param tg is the transition generator to use
    /// @param os is an std::ostream to which output is directed.
    /// @param vlevel is the verbosity level
    FMMExtTransitionTest( tts::FMMCard& card, 
			  tts::FMMTesterCard& tcard, 
			  tts::FMMTransitionGenerator& tg,
			  std::ostream& os = std::cout,
			  tts::FMMBasicTest::VerbosityLevel vlevel = tts::FMMBasicTest::V_ERR) 
      : tts::FMMBasicTest(os, vlevel), _card(card), _tcard(tcard),_tg(tg), _random(true) {};

    /// d-tor
    virtual ~FMMExtTransitionTest() {};

    /// set the test configuration 
    ///
    /// @param random is true for random choice of configuration (at the beginning of each loop)
    /// @param cfg is the FMM Configuration to be used if not in random mode (i.e. random=false)
    void setConfiguration(bool random = true, tts::FMMConfiguration cfg = tts::FMMConfiguration()) 
    { _random = random; _cfg=cfg; }; 

    /// get the name of the test
    virtual std::string getName() const { return "FMMExtTransitionTest"; };

    /// get the version of the test
    virtual std::string getVersion() const;

    /// get the parameters of the test
    ///
    /// returns any special parameters of the test as a std::string 
    virtual std::string getParameters() const;

  protected:
    /// run the test
    ///
    /// returns true if successful, false if not 
    /// @param nb_loop is the number of 128k blocks to simulate
    virtual bool _run(uint32_t nloops);

  private:
    tts::FMMConfiguration getRandomConfiguration();

    bool isIntermediateState(std::vector<tts::TTSState> const& states,
			     std::vector<tts::TTSState> const& initial_states,
			     std::vector<tts::TTSState> const& final_states);

    bool isSpuriousIntermediateState(std::vector<tts::TTSState> const& states,
				     std::vector<tts::TTSState> const& initial_states,
				     std::vector<tts::TTSState> const& final_states);

    tts::FMMCard& _card; 
    tts::FMMTesterCard& _tcard;
    tts::FMMTransitionGenerator& _tg;

    bool _random;
    tts::FMMConfiguration _cfg;
  };

}

#endif
