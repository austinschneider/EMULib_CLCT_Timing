// $Id: FlashListDefinition.h,v 1.12 2008/07/18 15:28:36 gutleber Exp $

/*************************************************************************
 * XDAQ Components for Distributed Data Acquisition                      *
 * Copyright (C) 2000-2009, CERN.			                 *
 * All rights reserved.                                                  *
 * Authors: J. Gutleber and L. Orsini					 *
 *                                                                       *
 * For the licensing terms see LICENSE.		                         *
 * For the list of contributors see CREDITS.   			         *
 *************************************************************************/

#ifndef _xmas_FlashListDefinition_h_
#define _xmas_FlashListDefinition_h_

#include <vector>
#include <set>
#include <map>
#include <string>
#include "toolbox/stl.h"
#include "xmas/exception/Exception.h"
#include "toolbox/Properties.h"
#include "xoap/DOMParser.h"
#include "xmas/ItemDefinition.h"

namespace xmas
{
	/*!
		Declares a Flash list. Inherits from Properties to be able
		to define properties for a flash list, e.g. when to collect
		or if collection of data should be made persistent or not.
		currently the following properties are allowed:	
		
		location = link to flashlist definition, if local it starts with #[name]
		local = "true" if definition is local, "false" if a link to a remote location
		name = name of flashlist
		
		properties are:
		name = name of the item
		infospace = infospace name in which item is found
		type = xdata type of the item
		function = if the item does not come from infospace its a function
	*/
	class FlashListDefinition: public toolbox::Properties
	{
		public:

		FlashListDefinition(DOMNode* node) throw (xmas::exception::Exception);
		
		~FlashListDefinition();
		
		xmas::ItemDefinition* getItem(const std::string& id) 
			throw (xmas::exception::Exception);
		
		std::vector<std::string> getItemNames();
		
		std::vector<xmas::ItemDefinition*> getItems();

		std::vector<std::string> getItems(const std::string & infospace);
		
		//! Retrieve all flashlist items that come from a given infospace
		//
		std::vector<xmas::ItemDefinition*> matchInfoSpaceItemProperties(const std::string & infospace);
		
		//! Retrieve all flashlist items that come from a given infospace
		//
		std::vector<xmas::ItemDefinition*> getInfoSpaceItemProperties();
		
		//! Retrieve all flashlist items that are generated by a function, not from an infospace item
		//
		std::vector<xmas::ItemDefinition*> getFunctionItemProperties();

		std::set<std::string> getInfospacesRegexSet();
		
		void removeItem(const std::string& id) 
			throw (xmas::exception::Exception);
			
		std::set<std::string> getTableNames();	
		
		
		size_t getNestedDepth();

		protected:
		
		void getTableNames(xmas::ItemDefinition* item, std::set<std::string>& tnames);
		
		void parse(DOMDocument* doc ,const std::string & identifier) throw (xmas::exception::Exception);

		void create (DOMNode* node) throw (xmas::exception::Exception);
		

		std::map<std::string, xmas::ItemDefinition*, toolbox::stl::ci_less> items_;
	};
}
#endif
