#ifndef _FMMEXTSEQUENCETEST_H
#define _FMMEXTSEQUENCETEST_H

/**
 *     @class FMMExtSequenceTest
 *
 *     @short FMM sequence using external transitions generated by an FMMTester in sequence mode.
 *
 *            This test uses transitions generated by an tts::FMMTransitionGenerator class.
 *            The following steps are performed:
 * 
 *            @li A set of transitions is loaded into the FMMTester sequence RAMS.
 *            @li A sequnce is played at a programmable frequence.
 *            @li The FMM output is checked via the FMMTester's input FIFOs    
 *            @li The history memory of the FMM is checked. (At high frequencies it cannot keep up)
 *
 *            The progarmmable frequency is the reduced and the procedure repeated.
 * 
 *       @see ---
 *    @author Hannes Sakulin
 * $Revision: 1.1 $
 *     $Date: 2007/03/27 07:53:34 $
 *
 *
 **/

#include "tts/fmm/FMMCard.hh"
#include "tts/fmmtester/FMMTesterCard.hh"
#include "tts/fmm/FMMTransitionGenerator.hh"
#include "tts/fmm/FMMConfiguration.hh"
#include "tts/fmm/FMMBasicTest.hh"

#include <stdint.h>

namespace tts {

  class FMMExtSequenceTest : public tts::FMMBasicTest {
  
  public:
    /// c-tor
    ///
    /// @param card is the FMMCard to use
    /// @param tcard is the FMMTesterCard to use
    /// @param tg is the transition generator to use
    /// @param os is an std::ostream to which output is directed.
    /// @param vlevel is the verbosity level
    FMMExtSequenceTest( tts::FMMCard& card, 
			tts::FMMTesterCard& tcard, 
			tts::FMMTransitionGenerator& tg,
			std::ostream& os = std::cout,
			tts::FMMBasicTest::VerbosityLevel vlevel = tts::FMMBasicTest::V_ERR) 
      : tts::FMMBasicTest(os, vlevel), _card(card), _tcard(tcard),_tg(tg), _randomcfg(true), _clk_sel(2), _nsequence(80), _inputfifo_delay(12) {};

    /// d-tor
    virtual ~FMMExtSequenceTest() {};

    //   /// the test function
    //   ///
    //   /// @param nb_loop is the number of 128k blocks to simulate
    //   /// @param clk_sel_max is the maximum value of clk_sel to use. Higher values mean slower
    //   ///        clock frequency (see FMMTester).
    //   /// @param nsequence is the number of sequences to generate
    //   ///        The Output of the FMM can only be checked if nsequence=1;
    //   bool runExtSequenceTest(int nb_loop = 10, uint32_t clk_sel_max = 19, uint32_t nsequence=1,
    // 			  bool random = true, FMMConfiguration cfg = FMMConfiguration());

    /// set the test parameters
    ///
    /// @param clk_sel_max is the value of clk_sel to use. Higher values mean slower
    ///        clock frequency (see FMMTester).
    /// @param nsequence is the number of sequences to generate
    ///        Due to the length of the input FIFO in the FMMTEster, the Output of the FMM
    ///        is only checked for the first sequence, even if more are specified. 
    /// @param inputfifo_delay is the delay between generating a test pattern
    ///        and sampling the FMM outputs inside the FMM Tester. It is measured
    ///        in steps of 25 ns. 
    ///        With FMM Firmware 051010_00 and tester Firmware 051031_00, a value of 12 
    ///        works fine with short (50 cm) cables up to 20 MHz. A value of 13 works fine up to 5 MHz
    ///        and also allows for the use of longer (10m) cables.
    void setTestParameters(uint32_t clk_sel, uint32_t nsequence=1, uint32_t inputfifo_delay=12) {
      _clk_sel = clk_sel;
      _nsequence = nsequence; 
      _inputfifo_delay = inputfifo_delay;
    };


    /// set the FMM configuration for the test
    ///
    /// @param random is true for random choice of configuration (at the beginning of each loop)
    /// @param cfg is the FMM Configuration to be used if not in random mode (i.e. random=false)
    void setConfiguration(bool random = true, tts::FMMConfiguration cfg = tts::FMMConfiguration()) { 
      _randomcfg = random; _cfg=cfg; 
    }; 

    /// get the name of the test
    virtual std::string getName() const { return "FMMExtSequenceTest"; };

    /// get the version of the test
    virtual std::string getVersion() const;

    /// get the parameters of the test
    ///
    /// returns any special parameters of the test as a std::string 
    virtual std::string getParameters() const;

  protected:
    /// run the test
    ///
    /// returns true if successful, false if not 
    /// @param nb_loop is the number of loops to do
    virtual bool _run(uint32_t nloops);

  private:
    tts::FMMConfiguration getRandomConfiguration();

    void computeDeadTime(std::vector<std::vector<tts::TTSState> > const& transitions,
			 std::vector<uint32_t> & deadtimes);

    bool isIntermediateState(std::vector<tts::TTSState> const& states,
			     std::vector<tts::TTSState> const& initial_states,
			     std::vector<tts::TTSState> const& final_states);

    bool isSpuriousIntermediateState(std::vector<tts::TTSState> const& states,
				     std::vector<tts::TTSState> const& initial_states,
				     std::vector<tts::TTSState> const& final_states);

    tts::FMMCard& _card; 
    tts::FMMTesterCard& _tcard;
    tts::FMMTransitionGenerator& _tg;

    bool _randomcfg;
    tts::FMMConfiguration _cfg;

    uint32_t _clk_sel;
    uint32_t _nsequence;
    uint32_t _inputfifo_delay;
  };

}
#endif
