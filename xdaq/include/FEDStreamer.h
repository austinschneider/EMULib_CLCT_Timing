// $Id: FEDStreamer.h,v 1.13 2006/09/11 11:47:01 lorsini Exp $

/*************************************************************************
 * XDAQ Components for Distributed Data Acquisition                      *
 * Copyright (C) 2000-2004, CERN.			                 *
 * All rights reserved.                                                  *
 * Authors: J. Gutleber and L. Orsini					 *
 *                                                                       *
 * For the licensing terms see LICENSE.		                         *
 * For the list of contributors see CREDITS.   			         *
 *************************************************************************/

#ifndef _FEDStreamer_h_
#define _FEDStreamer_h_

// stl
#include <string>
#include <vector>
#include <deque>

// xdaq definitions
#include "xdaq/Application.h"
#include "toolbox/PerformanceMeter.h"
#include "xdaq/WebApplication.h"

// i2o definitions
#include "i2o/i2o.h"
#include "i2o/Method.h"

// toolbox definitions
#include "toolbox/mem/Reference.h"
#include "toolbox/mem/Pool.h"
#include "toolbox/fsm/FiniteStateMachine.h"
#include "toolbox/task/Action.h"
#include "toolbox/task/WorkLoop.h"
#include "toolbox/math/random.h"
#include "toolbox/rlist.h"

// xdata definitions
#include "xdata/UnsignedInteger32.h"
#include "xdata/UnsignedInteger64.h"
#include "xdata/Double.h"
#include "xdata/String.h"
#include "xdata/Boolean.h"
#include "xdata/ActionListener.h"
#include "xdata/Vector.h"


//
// cgicc
//
#include "cgicc/CgiDefs.h"
#include "cgicc/Cgicc.h"
#include "cgicc/HTTPHTMLHeader.h"
#include "cgicc/HTMLClasses.h"
#include "xgi/Utils.h"
#include "xgi/Input.h"
#include "xgi/Output.h"


const xdata::UnsignedInteger32T MaxFedUnits = 4; // allow at most 4 PCI cards

class FEDStreamer: public xdaq::WebApplication,  xdata::ActionListener
{
	public:
	
	XDAQ_INSTANTIATOR();
	
	class Measurement
	{
		public:	
		
		void registerFields(xdata::Bag<Measurement> * bag)
		{		
			bag->addField("bandwidth", &bandwidth);
               	 	bag->addField("rate", &rate);
			bag->addField("latency", &latency);
			bag->addField("counter", &counter);
		}
	
        	xdata::Double bandwidth;
        	xdata::Double rate;
		xdata::Double latency;
		xdata::UnsignedInteger32 counter;

	};



	public:	
	
	FEDStreamer(xdaq::ApplicationStub * s) throw (xdaq::exception::Exception);
	
	virtual ~FEDStreamer();
	
	// WS interface
	xoap::MessageReference start (xoap::MessageReference msg) throw (xoap::exception::Exception);
	xoap::MessageReference stop (xoap::MessageReference msg) throw (xoap::exception::Exception);
	xoap::MessageReference reset (xoap::MessageReference msg) throw (xoap::exception::Exception);
	
	// HTML interface
	void Default(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
	void streamerStart(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
	void streamerStop(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
	void streamerReset(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);

	// I2O Interface for self sending test
	void dataReady(  toolbox::mem::Reference * ref);

	// Control/configuration variables
	//
	xdata::String pheapsPoolNSS_;  // URN nss  for the memory pool to be used
	xdata::String destinationClass_; // where to deliver the FED data (class name)
	xdata::UnsignedInteger32 destinationInstance_; // where to deliver the FED data (instance number)
	xdata::UnsignedInteger32 blockSize_;
	xdata::Boolean autoGeneratedData_;
        xdata::UnsignedInteger32 autoGeneratedDataStart_; // initial number of events generated	
	xdata::UnsignedInteger32 autoGeneratedMaxSize_;  // parameters for automatically
	xdata::UnsignedInteger32 autoGeneratedMeanSize_; // generating event fragments
	xdata::UnsignedInteger32 autoGeneratedMinSize_;  // according to min-mean-max sizes
	xdata::UnsignedInteger32 autoGeneratedStdDev_;
	xdata::Boolean selfTest_;
	xdata::UnsignedInteger32 samples_;
	xdata::Boolean fixedSize_;
	xdata::UnsignedInteger32  receivePattern_; // see Eric Cano's manual	
	xdata::UnsignedInteger32 maxInputBlocks_;
	xdata::String workLoopType_;
	xdata::String workLoopName_;

	// watching variables
	xdata::Vector<xdata::Bag<Measurement> > measurements_;
	
	xdata::UnsignedInteger32 actualDataSizePerBlock_;
	xdata::UnsignedInteger32 maxUnitsFound_; // maximum number of FED cards in system


	protected:
	
	void failedTransition (toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception);
	bool processStream(toolbox::task::WorkLoop * wl );
	void startAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception);
	void stopAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception);
	void resetAction() throw (xcept::Exception);
	
	void actionPerformed (xdata::Event& e) ;
	void setDefaultValues();

	// Helper function to generate a fragment in the FED
	//
	int generateFragment(xdata::UnsignedInteger32T unit);

        // Helper function to set the I2O fields in the message frame
	// If the fedkit should function as an input to the new EVB the API of this function
        // has to be adapted to the I2oMessage formats of the EVB.
	// Returns the size of the I2O data frame in units of 32 bit words
	//
        xdata::UnsignedInteger32T fillFrame( char* data, xdata::UnsignedInteger32T length, xdata::UnsignedInteger32T msgNb, xdata::UnsignedInteger32T nbMsgs, xdata::UnsignedInteger32T lvl1Id , U64 initiatorContext);
	
	void closeFED (bool flush);
	void flushFED (xdata::UnsignedInteger32T unit);
	void provideBlocks(xdata::UnsignedInteger32T unit , xdata::UnsignedInteger32T blocks) throw (xdaq::exception::Exception);
	toolbox::mem::Reference * getFragment(xdata::UnsignedInteger32T * unit, xdata::UnsignedInteger32T * blocks) throw (xdaq::exception::Exception);;
	void emulateProvideBlocks (xdata::UnsignedInteger32T unit, toolbox::mem::Reference * ref);
	toolbox::mem::Reference* emulateGetFragment(xdata::UnsignedInteger32T unit);
	
	void displayStartPage(xgi::Input * in, xgi::Output * out);
	void displayStopPage(xgi::Input * in, xgi::Output * out);
	void displayFailurePage(xgi::Input * in, xgi::Output * out);
	void displayBooleanCombo(xgi::Output * out, const std::string & name, const std::string & selection);
	// Local class variables
	//
	xdata::UnsignedInteger32T reservedSize_;
	xdaq::ApplicationDescriptor * destinationDescriptor_;
	xdata::UnsignedInteger32T destinationTid_; // where to deliver the FED data (target addr)
	xdata::UnsignedInteger32T initiatorTid_;
	toolbox::math::LogNormalGen* lognorm_;
	xdata::UnsignedInteger32T autoGeneratedTrigger_; // count generated triggers
	std::vector<struct fedkit_receiver*> receivers_;
	xdata::UnsignedInteger32T currentport_;
	std::vector<toolbox::PerformanceMeter>  inputCardPerfMeters_; 
	
	
	typedef struct
	{
		xdata::UnsignedInteger32T  unit;
		xdata::UnsignedInteger32T  blocks;
	} RequiredBlocks;
	
	toolbox::rlist<RequiredBlocks> requestBlockQueue_;
	std::vector<std::deque<toolbox::mem::Reference*> > emulateFED_;
	
	// remember if any buffer were allocated (initialized to false)
	bool allocatedBlocks_;
	bool receiversOpen_;
	toolbox::fsm::FiniteStateMachine fsm_; // application state machine
	toolbox::mem::Pool * pheapsPool_;
	
	// Work loop
	toolbox::task::ActionSignature * processStreamJob_;
	
	// synchronization variables for graceful exisitng the workLoop
	bool stop_;
	volatile bool done_;
	
	// remember the last failure that has occured since successful operation
	std::string lastKnownError_;
	
	

			
};



#endif
